// 使用するプラグイン
plugins {
    id 'java'
    id 'checkstyle'// Gradleのコアプラグインなので、ここにバージョンは指定できない! version '6.18'
    id 'findbugs'// Gradleのコアプラグイン version '3.0.1'
    id 'jacoco'
    id 'war'
    id 'maven-publish'
    id 'eclipse'
    id 'eclipse-wtp'
    id 'org.sonarqube' version '2.0.1'
    id 'jetty'
    id 'com.bmuschko.tomcat-base' version '2.2.4'
}

// Javaプラグイン用
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'jp.gihyo.jenkinsbook'
version = '1.0.0-SNAPSHOT'

// ライブラリ参照に使うリポジトリの設定
repositories {
    //mavenCentral()
    maven {
        url "http://nexus.hagi.home:8000/content/groups/public"
    }
}

// 成果物の公開先の設定
publishing {
    publications {
        jar(MavenPublication) {
            from components.java
            artifactId = 'sampleproject'
        }
        war(MavenPublication) {
            from components.web
            artifactId = 'sampleproject'
        }
    }
    // ~/.gradle/gradle.properties
    // reporisotyUser, repositoryPass
    repositories {
        maven {
            name "releases"
            url "http://nexus.hoge.home:8000/content/repositories/releases"
            credentials {
                username repositoryUser
                password repositoryPass
            }
        }
        maven {
            name "snapshots"
            url "http://nexus.hoge.home:8000/content/repositories/snapshots"
            credentials {
                username repositoryUser
                password repositoryPass
            }
        }
    }
}

// 依存関係の設定
dependencies {
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
    providedCompile 'javax.servlet.jsp:javax.servlet.jsp-api:2.3.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.easymock:easymock:3.4'
    testCompile 'org.seleniumhq.selenium:selenium-java:2.53.0'
    
    //checkstyle fileTree(dir: 'libs/checkstyle/', include: '*.jar')
    
    def tomcatVersion = '8.0.33'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
           "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"
//    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
//        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
//    }
    
}

// ソースセットの設定
sourceSets {
    // 機能テスト用（Seleniumでのテストを想定)
    functionalTest {
        java.srcDir file('src/functionalTest/java')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath = sourceSets.main.output + configurations.testCompile
        runtimeClasspath = output + compileClasspath + configurations.testRuntime
    }
}

// エクストラプロパティの設定
ext {
    //project.hasProperty('hogehoge') ? hogehoge : 'none!'
    tomcatHttpHost = project.hasProperty('tomcatHttpHost') ? tomcatHttpHost : 'localhost'
    tomcatHttpPort = 18080;
    tomcatStopPort = 18081;
    tomcatStopKey = 'stopKey'
}

processFunctionalTestResources {
    expand baseUrl:"http://$tomcatHttpHost:$tomcatHttpPort/sampleproject"
}

checkstyle {
    toolVersion = '6.18'
    //configFile = file('config/checkstyle/checkstyle_checks.xml')
    //configProperties = ['checkstyle.suppressions.file':'config/checkstyle/suppressions.xml']
    //configFile = file('config/checkstyle/sun_checks.xml')
    configFile = file('config/checkstyle/google_checks.xml')
    ignoreFailures = true
}

findbugs {
    toolVersion = '3.0.1'
    ignoreFailures = true
}

test {
    ignoreFailures = true
    reports.html.destination = file("${reports.html.destination}/unit")
    reports.junitXml.destination = file("${reports.junitXml.destination}/unit")
}

jacoco {
    toolVersion = '0.7.6.201602180812'
}

// ~/.gradle/gradle.properties
// systemProp.sonar.host.url, systemProp.sonar.login, systemProp.sonar.password
sonarqube {
    properties {
        //property "sonar.host.url", "http://nexus.hagi.home:8000/"
        //property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

jar {
    baseName = 'sampleproject'
}

war {
    dependsOn check
    baseName = 'sampleproject'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

task tomcatRun4FunctionalTest(type: com.bmuschko.gradle.tomcat.tasks.TomcatRunWar) {
    httpPort = tomcatHttpPort
    stopPort = tomcatStopPort
    stopKey = tomcatStopKey
    daemon = true
}

task tomcatStop4FunctionalTest(type: com.bmuschko.gradle.tomcat.tasks.TomcatStop) {
    stopPort = tomcatStopPort
    stopKey = tomcatStopKey
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    reports.html.destination = file("${reports.html.destination}/functional")
    reports.junitXml.destination = file("${reports.junitXml.destination}/functional")
    group = 'verification'
    
    dependsOn tomcatRun4FunctionalTest
    finalizedBy tomcatStop4FunctionalTest
}

task debugs << {
    def abc = project.hasProperty('hogehoge') ? hogehoge : 'none!'
    println abc
    println project.name
}